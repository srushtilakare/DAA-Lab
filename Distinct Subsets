//program to find all distinct subsets of a given set using Bit Masking Approach.
#include <iostream>
#include <set>
using namespace std;

int main() {
    int n;

    // Input size of the set
    cout << "Enter the size of the set: ";
    cin >> n;

    int arr[n];

    // Input the elements of the set
    cout << "Enter the elements of the set: ";
    for (int i = 0; i < n; i++) {
        cin >> arr[i];
    }

    // Use a set to store subsets as strings (to avoid duplicates)
    set<string> subsets;

    // Total number of subsets = 2^n
    int totalSubsets = 1 << n;

    // Generate all subsets using bit masking
    for (int mask = 0; mask < totalSubsets; mask++) {
        string subset = "{";
        bool isFirst = true;

        for (int i = 0; i < n; i++) {
            if (mask & (1 << i)) { // If the i-th bit is set in mask
                if (!isFirst) subset += ", ";
                subset += to_string(arr[i]);
                isFirst = false;
            }
        }

        subset += "}";
        subsets.insert(subset); // Add subset to the set
    }

    // Print all distinct subsets
    cout << "All distinct subsets are: " << endl;
    for (const auto &s : subsets) {
        cout << s << endl;
    }

    return 0;
}
